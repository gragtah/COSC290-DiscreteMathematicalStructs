--1)

flatten []  =  []
flatten (l:ls)  =  l ++ (flatten ls)

comp (f1,f2) x = flatten(map f1 ( f2 x))


relcomp 2 f1 = comp (f1,f1)
relcomp n f1 = comp(f1,(relcomp (n-1) f1))

inlist a [] = False
inlist a (l:s) = if (a ==l) then True
                 else (inlist a s)

fixlist [] = []				 
fixlist (l:s) = if (inlist l s == True) then fixlist s
					else l:fixlist s 
				 
reflexrel q x = fixlist (x:(q x))

trans2 1 rel x = rel x 
trans2 n rel x = (relcomp n rel x)++(trans2 (n-1) rel x)

transrel2 n rel x = fixlist ((relcomp n rel x)++(trans2 (n-1) rel x))


--2)

rlist = [1,2,3,4]
r rlist 1 = [2,4]
r rlist 2 = [3]
r rlist 3 = [4]
r rlist 4 = []

slist = [1,2,3,4]
s slist 1 = [2]
s slist 2 = [3,4]
s slist 3 = []
s slist 4 = []

plist = [1,2,3,4]
p plist 1 = [3]
p plist 2 = [3]
p plist 3 = [4]
p plist 4 = []

qlist = [1,2,3,4,5,6,7,8]
q qlist 1 = [3]
q qlist 2 = [4]
q qlist 3 = [5]
q qlist 4 = [6]
q qlist 5 = [7]
q qlist 6 = [7]
q qlist 7 = [8]
q qlist 8 = []


--3)

transrelnew z zlist x = fixlist ((transrel2 (length(zlist)) (z zlist) x))
reflexrelnew z zlist x = reflexrel (z zlist) x



--4)

poset z zlist x = fixlist ((transrelnew z zlist x)++(reflexrelnew z zlist x))



--5)

interlist [] l2 = []
interlist (x:l1) l2 = if (inlist x l2 == True) then (x: interlist l1 l2)
					  else interlist l1 l2