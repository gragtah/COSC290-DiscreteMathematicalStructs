double x = 2*x
add x y = x+y
{-
Main> :type map add
map add :: Num a => [a] -> [a -> a]
-}

r 1 = [2]
r 2 = [3]
r 3 = [1,3]
r 4 = [1]

s 1 = [10,11]
s 2 = [10,12]
s 3 = []

t 1 = [2]
t 2 = [3]
t 3 = [1,4]
t 4 = [1]

flatten []  =  []
flatten (l:ls)  =  l ++ (flatten ls)

comp (f1,f2) x = flatten(map f1 ( f2 x))


relcomp 2 f1 = comp (f1,f1)
relcomp n f1 = comp(f1,(relcomp (n-1) f1))

inlist a [] = False
inlist a (l:s) = if (a ==l) then True
                 else (inlist a s)

fixlist [] = []				 
fixlist (l:s) = if (inlist l s == True) then fixlist s
					else l:fixlist s 
				 
reflexrel q x = fixlist (x:(q x))

trans2 1 rel x = rel x 
trans2 n rel x = (relcomp n rel x)++(trans2 (n-1) rel x)

transrel2 n rel x = fixlist ((relcomp n rel x)++(trans2 (n-1) rel x))