{- part 1

Hugs> 3
3
Hugs> [3,5]
[3,5]
Hugs> 5.78
5.78

-}


{- part 2

Hugs> :type 3
3 :: Num a => a
Hugs> :type [3,5]
[3,5] :: Num a => [a]
Hugs> :type 5.78
5.78 :: Fractional a => a

-}


{- part 3

Hugs> (3,4)
(3,4)
Hugs> :type (3,4)
(3,4) :: (Num a, Num b) => (b,a)

-}



-- part 4

double x = 2 * x
triple x = 3*x
{-
Main> double 4
8
Main> double 4.5
9.0
Main> double (4,5)
ERROR - Cannot infer instance
*** Instance   : Num (b,a)
*** Expression : double (4,5)
Main> double (-2)
-4
Main> triple (-1)
-3
Main> triple 5
15

-}



-- part 5

add (x,y) = x + y
add1 x y = x + y
{- 2 ways to define add
and type is:

Main> :type add
add :: Num a => (a,a) -> a
Main> :type add1
add1 :: Num a => a -> a -> a

-}



-- part 6

fact 0 = 1
fact x = x*fact(x-1)

{-
Main> fact 5
120
Main> :type fact 
fact :: Num a => a -> a

-}



--part 7

boolval1 = 3==4

{-
Main> boolval1
False
Main> not boolval1
True
-}



-- part 8

first (a,b) = a
second (a,b) = b
{-
Main> first(3 , 5)
3
Main> second(3 , 5)
5
-}



{- part 9

Main> :type first
first :: (a,b) -> a
So it is completely polymorphic, no restrictions on input datatypes

Main> :type first(add, fact)
first (add,fact) :: (Num a, Num b) => (a,a) -> a

Main> first(add (3,4), fact 5)
7
The function 'first' returns only the first value of the 
ordered pair by definition. And that, here, is add(3,4) which returns 7
-}



--part 10

listlength [] = 0
listlength (x:list) = 1 + (listlength list)
{-
Main> listlength [[3,5],[2],[4,7]]
3
Main> listlength [3,5]
2
Main> :type listlength
listlength :: Num a => [b] -> a
-}